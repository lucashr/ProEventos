{"ast":null,"code":"import { InjectionToken, forwardRef, Optional, Inject, ElementRef, KeyValueDiffers, Directive, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as Éµngcc0 from '@angular/core';\nvar CurrencyMaskInputMode = /*#__PURE__*/(() => {\n  (function (CurrencyMaskInputMode) {\n    CurrencyMaskInputMode[CurrencyMaskInputMode[\"FINANCIAL\"] = 0] = \"FINANCIAL\";\n    CurrencyMaskInputMode[CurrencyMaskInputMode[\"NATURAL\"] = 1] = \"NATURAL\";\n  })(CurrencyMaskInputMode || (CurrencyMaskInputMode = {}));\n\n  return CurrencyMaskInputMode;\n})();\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\n\nclass InputManager {\n  constructor(htmlInputElement) {\n    this.htmlInputElement = htmlInputElement;\n  }\n\n  setCursorAt(position) {\n    if (this.htmlInputElement.setSelectionRange) {\n      this.htmlInputElement.focus();\n      this.htmlInputElement.setSelectionRange(position, position);\n    } else if (this.htmlInputElement.createTextRange) {\n      let textRange = this.htmlInputElement.createTextRange();\n      textRange.collapse(true);\n      textRange.moveEnd(\"character\", position);\n      textRange.moveStart(\"character\", position);\n      textRange.select();\n    }\n  }\n\n  updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n    this.rawValue = newRawValue;\n    let newLength = newRawValue.length;\n    selectionStart = selectionStart - (oldLength - newLength);\n    this.setCursorAt(selectionStart);\n  }\n\n  get canInputMoreNumbers() {\n    let onlyNumbers = this.rawValue.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, \"\");\n    let haventReachedMaxLength = !(onlyNumbers.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n    let selectionStart = this.inputSelection.selectionStart;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let haveNumberSelected = !!(selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\n    let startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n    return haventReachedMaxLength || haveNumberSelected || startWithZero;\n  }\n\n  get inputSelection() {\n    let selectionStart = 0;\n    let selectionEnd = 0;\n\n    if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n      selectionStart = this.htmlInputElement.selectionStart;\n      selectionEnd = this.htmlInputElement.selectionEnd;\n    } else {\n      let range = document.selection.createRange();\n\n      if (range && range.parentElement() == this.htmlInputElement) {\n        let lenght = this.htmlInputElement.value.length;\n        let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n        let startRange = this.htmlInputElement.createTextRange();\n        startRange.moveToBookmark(range.getBookmark());\n        let endRange = this.htmlInputElement.createTextRange();\n        endRange.collapse(false);\n\n        if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n          selectionStart = selectionEnd = lenght;\n        } else {\n          selectionStart = -startRange.moveStart(\"character\", -lenght);\n          selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n\n          if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n            selectionEnd = lenght;\n          } else {\n            selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n            selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n          }\n        }\n      }\n    }\n\n    return {\n      selectionStart: selectionStart,\n      selectionEnd: selectionEnd\n    };\n  }\n\n  get rawValue() {\n    return this.htmlInputElement && this.htmlInputElement.value;\n  }\n\n  set rawValue(value) {\n    this._storedRawValue = value;\n\n    if (this.htmlInputElement) {\n      this.htmlInputElement.value = value;\n    }\n  }\n\n  get storedRawValue() {\n    return this._storedRawValue || '';\n  }\n\n}\n\nclass InputService {\n  constructor(htmlInputElement, options) {\n    this.htmlInputElement = htmlInputElement;\n    this.options = options;\n    this.SINGLE_DIGIT_REGEX = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\n    this.ONLY_NUMBERS_REGEX = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\n    this.PER_AR_NUMBER = new Map();\n    this.inputManager = new InputManager(htmlInputElement);\n    this.initialize();\n  }\n\n  initialize() {\n    this.PER_AR_NUMBER.set(\"\\u06F0\", \"0\");\n    this.PER_AR_NUMBER.set(\"\\u06F1\", \"1\");\n    this.PER_AR_NUMBER.set(\"\\u06F2\", \"2\");\n    this.PER_AR_NUMBER.set(\"\\u06F3\", \"3\");\n    this.PER_AR_NUMBER.set(\"\\u06F4\", \"4\");\n    this.PER_AR_NUMBER.set(\"\\u06F5\", \"5\");\n    this.PER_AR_NUMBER.set(\"\\u06F6\", \"6\");\n    this.PER_AR_NUMBER.set(\"\\u06F7\", \"7\");\n    this.PER_AR_NUMBER.set(\"\\u06F8\", \"8\");\n    this.PER_AR_NUMBER.set(\"\\u06F9\", \"9\");\n    this.PER_AR_NUMBER.set(\"\\u0660\", \"0\");\n    this.PER_AR_NUMBER.set(\"\\u0661\", \"1\");\n    this.PER_AR_NUMBER.set(\"\\u0662\", \"2\");\n    this.PER_AR_NUMBER.set(\"\\u0663\", \"3\");\n    this.PER_AR_NUMBER.set(\"\\u0664\", \"4\");\n    this.PER_AR_NUMBER.set(\"\\u0665\", \"5\");\n    this.PER_AR_NUMBER.set(\"\\u0666\", \"6\");\n    this.PER_AR_NUMBER.set(\"\\u0667\", \"7\");\n    this.PER_AR_NUMBER.set(\"\\u0668\", \"8\");\n    this.PER_AR_NUMBER.set(\"\\u0669\", \"9\");\n  }\n\n  addNumber(keyCode) {\n    const {\n      decimal,\n      precision,\n      inputMode\n    } = this.options;\n    let keyChar = String.fromCharCode(keyCode);\n    const isDecimalChar = keyChar === this.options.decimal;\n\n    if (!this.rawValue) {\n      this.rawValue = this.applyMask(false, keyChar);\n      let selectionStart = undefined;\n\n      if (inputMode === CurrencyMaskInputMode.NATURAL && precision > 0) {\n        selectionStart = this.rawValue.indexOf(decimal);\n\n        if (isDecimalChar) {\n          selectionStart++;\n        }\n      }\n\n      this.updateFieldValue(selectionStart);\n    } else {\n      let selectionStart = this.inputSelection.selectionStart;\n      let selectionEnd = this.inputSelection.selectionEnd;\n      const rawValueStart = this.rawValue.substring(0, selectionStart);\n      let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length); // In natural mode, replace decimals instead of shifting them.\n\n      const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\n\n      if (inputMode === CurrencyMaskInputMode.NATURAL && inDecimalPortion && selectionStart === selectionEnd) {\n        rawValueEnd = rawValueEnd.substring(1);\n      }\n\n      const newValue = rawValueStart + keyChar + rawValueEnd;\n      let nextSelectionStart = selectionStart + 1;\n      const isDecimalOrThousands = isDecimalChar || keyChar === this.options.thousands;\n\n      if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\n        // If the cursor is just before the decimal or thousands separator and the user types the\n        // decimal or thousands separator, move the cursor past it.\n        nextSelectionStart++;\n      } else if (!this.SINGLE_DIGIT_REGEX.test(keyChar)) {\n        // Ignore other non-numbers.\n        return;\n      }\n\n      this.rawValue = newValue;\n      this.updateFieldValue(nextSelectionStart);\n    }\n  }\n\n  applyMask(isNumber, rawValue, disablePadAndTrim = false) {\n    let {\n      allowNegative,\n      decimal,\n      precision,\n      prefix,\n      suffix,\n      thousands,\n      min,\n      max,\n      inputMode\n    } = this.options;\n    rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n    let onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n\n    if (!onlyNumbers && rawValue !== decimal) {\n      return \"\";\n    }\n\n    if (inputMode === CurrencyMaskInputMode.NATURAL && !isNumber && !disablePadAndTrim) {\n      rawValue = this.padOrTrimPrecision(rawValue);\n      onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n    }\n\n    let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^\\u0660*/g, \"\").replace(/^\\u06F0*/g, \"\").replace(/^0*/g, \"\");\n\n    if (integerPart == \"\") {\n      integerPart = \"0\";\n    }\n\n    let integerValue = parseInt(integerPart);\n    integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\n\n    if (thousands && integerPart.startsWith(thousands)) {\n      integerPart = integerPart.substring(1);\n    }\n\n    let newRawValue = integerPart;\n    let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n    let decimalValue = parseInt(decimalPart) || 0;\n    let isNegative = rawValue.indexOf(\"-\") > -1; // Ensure max is at least as large as min.\n\n    max = this.isNullOrUndefined(max) || this.isNullOrUndefined(min) ? max : Math.max(max, min); // Ensure precision number works well with more than 2 digits\n    // 23 / 100... 233 / 1000 and so on\n\n    const divideBy = Number('1'.padEnd(precision + 1, '0')); // Restrict to the min and max values.\n\n    let newValue = integerValue + decimalValue / divideBy;\n    newValue = isNegative ? -newValue : newValue;\n\n    if (!this.isNullOrUndefined(max) && newValue > max) {\n      return this.applyMask(true, max + '');\n    } else if (!this.isNullOrUndefined(min) && newValue < min) {\n      return this.applyMask(true, min + '');\n    }\n\n    if (precision > 0) {\n      if (newRawValue == \"0\" && decimalPart.length < precision) {\n        newRawValue += decimal + \"0\".repeat(precision - 1) + decimalPart;\n      } else {\n        newRawValue += decimal + decimalPart;\n      }\n    }\n\n    let isZero = newValue == 0;\n    let operator = isNegative && allowNegative && !isZero ? \"-\" : \"\";\n    return operator + prefix + newRawValue + suffix;\n  }\n\n  padOrTrimPrecision(rawValue) {\n    let {\n      decimal,\n      precision\n    } = this.options;\n    let decimalIndex = rawValue.lastIndexOf(decimal);\n\n    if (decimalIndex === -1) {\n      decimalIndex = rawValue.length;\n      rawValue += decimal;\n    }\n\n    let decimalPortion = rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX, \"\");\n    const actualPrecision = decimalPortion.length;\n\n    if (actualPrecision < precision) {\n      for (let i = actualPrecision; i < precision; i++) {\n        decimalPortion += '0';\n      }\n    } else if (actualPrecision > precision) {\n      decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\n    }\n\n    return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\n  }\n\n  clearMask(rawValue) {\n    if (this.isNullable() && rawValue === \"\") return null;\n    let value = (rawValue || \"0\").replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n\n    if (this.options.thousands) {\n      value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n    }\n\n    if (this.options.decimal) {\n      value = value.replace(this.options.decimal, \".\");\n    }\n\n    this.PER_AR_NUMBER.forEach((val, key) => {\n      const re = new RegExp(key, \"g\");\n      value = value.replace(re, val);\n    });\n    return parseFloat(value);\n  }\n\n  changeToNegative() {\n    if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n      // Apply the mask to ensure the min and max values are enforced.\n      this.rawValue = this.applyMask(false, \"-\" + this.rawValue);\n    }\n  }\n\n  changeToPositive() {\n    // Apply the mask to ensure the min and max values are enforced.\n    this.rawValue = this.applyMask(false, this.rawValue.replace(\"-\", \"\"));\n  }\n\n  removeNumber(keyCode) {\n    let {\n      decimal,\n      thousands,\n      prefix,\n      suffix,\n      inputMode\n    } = this.options;\n\n    if (this.isNullable() && this.value == 0) {\n      this.rawValue = null;\n      return;\n    }\n\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let selectionStart = this.inputSelection.selectionStart;\n    const suffixStart = this.rawValue.length - suffix.length;\n    selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\n    selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length)); // Check if selection was entirely in the prefix or suffix. \n\n    if (selectionStart === selectionEnd && this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\n      this.updateFieldValue(selectionStart);\n      return;\n    }\n\n    let decimalIndex = this.rawValue.indexOf(decimal);\n\n    if (decimalIndex === -1) {\n      decimalIndex = this.rawValue.length;\n    }\n\n    let shiftSelection = 0;\n    let insertChars = '';\n    const isCursorInDecimals = decimalIndex < selectionEnd;\n    const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;\n\n    if (selectionEnd === selectionStart) {\n      if (keyCode == 8) {\n        if (selectionStart <= prefix.length) {\n          return;\n        }\n\n        selectionStart--; // If previous char isn't a number, go back one more.\n\n        if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n          selectionStart--;\n        } // In natural mode, jump backwards when in decimal portion of number.\n\n\n        if (inputMode === CurrencyMaskInputMode.NATURAL && isCursorInDecimals) {\n          shiftSelection = -1; // when removing a single whole number, replace it with 0\n\n          if (isCursorImmediatelyAfterDecimalPoint && this.value < 10 && this.value > -10) {\n            insertChars += '0';\n          }\n        }\n      } else if (keyCode == 46 || keyCode == 63272) {\n        if (selectionStart === suffixStart) {\n          return;\n        }\n\n        selectionEnd++; // If next char isn't a number, go one more.\n\n        if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n          selectionStart++;\n          selectionEnd++;\n        }\n      }\n    } // In natural mode, replace decimals with 0s.\n\n\n    if (inputMode === CurrencyMaskInputMode.NATURAL && selectionStart > decimalIndex) {\n      const replacedDecimalCount = selectionEnd - selectionStart;\n\n      for (let i = 0; i < replacedDecimalCount; i++) {\n        insertChars += '0';\n      }\n    }\n\n    let selectionFromEnd = this.rawValue.length - selectionEnd;\n    this.rawValue = this.rawValue.substring(0, selectionStart) + insertChars + this.rawValue.substring(selectionEnd); // Remove leading thousand separator from raw value.\n\n    const startChar = this.rawValue.substr(prefix.length, 1);\n\n    if (startChar === thousands) {\n      this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\n      selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\n    }\n\n    this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\n  }\n\n  updateFieldValue(selectionStart, disablePadAndTrim = false) {\n    let newRawValue = this.applyMask(false, this.rawValue || \"\", disablePadAndTrim);\n    selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n    selectionStart = Math.max(this.options.prefix.length, Math.min(selectionStart, this.rawValue.length - this.options.suffix.length));\n    this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n  }\n\n  updateOptions(options) {\n    let value = this.value;\n    this.options = options;\n    this.value = value;\n  }\n\n  prefixLength() {\n    return this.options.prefix.length;\n  }\n\n  suffixLength() {\n    return this.options.suffix.length;\n  }\n\n  isNullable() {\n    return this.options.nullable;\n  }\n\n  get canInputMoreNumbers() {\n    return this.inputManager.canInputMoreNumbers;\n  }\n\n  get inputSelection() {\n    return this.inputManager.inputSelection;\n  }\n\n  get rawValue() {\n    return this.inputManager.rawValue;\n  }\n\n  set rawValue(value) {\n    this.inputManager.rawValue = value;\n  }\n\n  get storedRawValue() {\n    return this.inputManager.storedRawValue;\n  }\n\n  get value() {\n    return this.clearMask(this.rawValue);\n  }\n\n  set value(value) {\n    this.rawValue = this.applyMask(true, \"\" + value);\n  }\n\n  isNullOrUndefined(value) {\n    return value === null || value === undefined;\n  }\n\n}\n\nclass InputHandler {\n  constructor(htmlInputElement, options) {\n    this.inputService = new InputService(htmlInputElement, options);\n  }\n\n  handleCut(event) {\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 0);\n  }\n\n  handleInput(event) {\n    let selectionStart = this.inputService.inputSelection.selectionStart;\n    let keyCode = this.inputService.rawValue.charCodeAt(selectionStart - 1);\n    let rawValueLength = this.inputService.rawValue.length;\n    let storedRawValueLength = this.inputService.storedRawValue.length;\n\n    if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\n      this.inputService.updateFieldValue(selectionStart);\n      this.onModelChange(this.inputService.value);\n      return;\n    } // Restore the old value.\n\n\n    this.inputService.rawValue = this.inputService.storedRawValue;\n\n    if (rawValueLength < storedRawValueLength) {\n      // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\n      // input event, so we need to wrap this in a timeout.\n      this.timer(() => {\n        // Move the cursor to just after the deleted value.\n        this.inputService.updateFieldValue(selectionStart + 1); // Then backspace it.\n\n        this.inputService.removeNumber(8);\n        this.onModelChange(this.inputService.value);\n      }, 0);\n    }\n\n    if (rawValueLength > storedRawValueLength) {\n      // Move the cursor to just before the new value.\n      this.inputService.updateFieldValue(selectionStart - 1); // Process the character like a keypress.\n\n      this.handleKeypressImpl(keyCode);\n    }\n  }\n\n  handleKeydown(event) {\n    let keyCode = event.which || event.charCode || event.keyCode;\n\n    if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n      event.preventDefault();\n\n      if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() && this.inputService.inputSelection.selectionEnd >= this.inputService.rawValue.length - this.inputService.suffixLength()) {\n        this.clearValue();\n      } else {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n    }\n  }\n\n  clearValue() {\n    this.setValue(this.inputService.isNullable() ? null : 0);\n    this.onModelChange(this.inputService.value);\n  }\n\n  handleKeypress(event) {\n    let keyCode = event.which || event.charCode || event.keyCode;\n    event.preventDefault();\n\n    if (keyCode === 97 && event.ctrlKey) {\n      return;\n    }\n\n    this.handleKeypressImpl(keyCode);\n  }\n\n  handleKeypressImpl(keyCode) {\n    switch (keyCode) {\n      case undefined:\n      case 9:\n      case 13:\n        return;\n\n      case 43:\n        this.inputService.changeToPositive();\n        break;\n\n      case 45:\n        this.inputService.changeToNegative();\n        break;\n\n      default:\n        if (this.inputService.canInputMoreNumbers) {\n          let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n          if (selectionRangeLength == this.inputService.rawValue.length) {\n            this.setValue(null);\n          }\n\n          this.inputService.addNumber(keyCode);\n        }\n\n        break;\n    }\n\n    this.onModelChange(this.inputService.value);\n  }\n\n  handlePaste(event) {\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 1);\n  }\n\n  updateOptions(options) {\n    this.inputService.updateOptions(options);\n  }\n\n  getOnModelChange() {\n    return this.onModelChange;\n  }\n\n  setOnModelChange(callbackFunction) {\n    this.onModelChange = callbackFunction;\n  }\n\n  getOnModelTouched() {\n    return this.onModelTouched;\n  }\n\n  setOnModelTouched(callbackFunction) {\n    this.onModelTouched = callbackFunction;\n  }\n\n  setValue(value) {\n    this.inputService.value = value;\n  }\n  /**\n   * Passthrough to setTimeout that can be stubbed out in tests.\n   */\n\n\n  timer(callback, delayMillis) {\n    setTimeout(callback, delayMillis);\n  }\n\n}\n\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CurrencyMaskDirective),\n  multi: true\n};\nlet CurrencyMaskDirective = /*#__PURE__*/(() => {\n  class CurrencyMaskDirective {\n    constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n      this.currencyMaskConfig = currencyMaskConfig;\n      this.elementRef = elementRef;\n      this.keyValueDiffers = keyValueDiffers;\n      this.options = {};\n      this.optionsTemplate = {\n        align: \"right\",\n        allowNegative: true,\n        allowZero: true,\n        decimal: \".\",\n        precision: 2,\n        prefix: \"$ \",\n        suffix: \"\",\n        thousands: \",\",\n        nullable: false,\n        inputMode: CurrencyMaskInputMode.FINANCIAL\n      };\n\n      if (currencyMaskConfig) {\n        this.optionsTemplate = currencyMaskConfig;\n      }\n\n      this.keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n\n    ngAfterViewInit() {\n      this.elementRef.nativeElement.style.textAlign = this.options && this.options.align ? this.options.align : this.optionsTemplate.align;\n    }\n\n    ngDoCheck() {\n      if (this.keyValueDiffer.diff(this.options)) {\n        this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n        this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n      }\n    }\n\n    ngOnInit() {\n      this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n    }\n\n    handleBlur(event) {\n      this.inputHandler.getOnModelTouched().apply(event);\n    }\n\n    handleCut(event) {\n      if (!this.isChromeAndroid()) {\n        !this.isReadOnly() && this.inputHandler.handleCut(event);\n      }\n    }\n\n    handleInput(event) {\n      if (this.isChromeAndroid()) {\n        !this.isReadOnly() && this.inputHandler.handleInput(event);\n      }\n    }\n\n    handleKeydown(event) {\n      if (!this.isChromeAndroid()) {\n        !this.isReadOnly() && this.inputHandler.handleKeydown(event);\n      }\n    }\n\n    handleKeypress(event) {\n      if (!this.isChromeAndroid()) {\n        !this.isReadOnly() && this.inputHandler.handleKeypress(event);\n      }\n    }\n\n    handlePaste(event) {\n      if (!this.isChromeAndroid()) {\n        !this.isReadOnly() && this.inputHandler.handlePaste(event);\n      }\n    }\n\n    handleDrop(event) {\n      if (!this.isChromeAndroid()) {\n        event.preventDefault();\n      }\n    }\n\n    isChromeAndroid() {\n      return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n    }\n\n    isReadOnly() {\n      return this.elementRef.nativeElement.hasAttribute('readonly');\n    }\n\n    registerOnChange(callbackFunction) {\n      this.inputHandler.setOnModelChange(callbackFunction);\n    }\n\n    registerOnTouched(callbackFunction) {\n      this.inputHandler.setOnModelTouched(callbackFunction);\n    }\n\n    setDisabledState(value) {\n      this.elementRef.nativeElement.disabled = value;\n    }\n\n    writeValue(value) {\n      this.inputHandler.setValue(value);\n    }\n\n  }\n\n  CurrencyMaskDirective.Éµfac = function CurrencyMaskDirective_Factory(t) {\n    return new (t || CurrencyMaskDirective)(Éµngcc0.ÉµÉµdirectiveInject(CURRENCY_MASK_CONFIG, 8), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.KeyValueDiffers));\n  };\n\n  CurrencyMaskDirective.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: CurrencyMaskDirective,\n    selectors: [[\"\", \"currencyMask\", \"\"]],\n    hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        Éµngcc0.ÉµÉµlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) {\n          return ctx.handleBlur($event);\n        })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) {\n          return ctx.handleCut($event);\n        })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) {\n          return ctx.handleInput($event);\n        })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) {\n          return ctx.handleKeydown($event);\n        })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) {\n          return ctx.handleKeypress($event);\n        })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) {\n          return ctx.handlePaste($event);\n        })(\"drop\", function CurrencyMaskDirective_drop_HostBindingHandler($event) {\n          return ctx.handleDrop($event);\n        });\n      }\n    },\n    inputs: {\n      options: \"options\"\n    },\n    features: [Éµngcc0.ÉµÉµProvidersFeature([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR])]\n  });\n  return CurrencyMaskDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxCurrencyModule = /*#__PURE__*/(() => {\n  class NgxCurrencyModule {\n    static forRoot(config) {\n      return {\n        ngModule: NgxCurrencyModule,\n        providers: [{\n          provide: CURRENCY_MASK_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n\n  }\n\n  NgxCurrencyModule.Éµfac = function NgxCurrencyModule_Factory(t) {\n    return new (t || NgxCurrencyModule)();\n  };\n\n  NgxCurrencyModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n    type: NgxCurrencyModule\n  });\n  NgxCurrencyModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n    imports: [[CommonModule, FormsModule]]\n  });\n  return NgxCurrencyModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxCurrencyModule, {\n    declarations: function () {\n      return [CurrencyMaskDirective];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [CurrencyMaskDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskInputMode, NgxCurrencyModule }; //# sourceMappingURL=ngx-currency.js.map","map":null,"metadata":{},"sourceType":"module"}